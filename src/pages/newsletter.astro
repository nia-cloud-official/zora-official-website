---
export const prerender = false;

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import MainLayout from "@/layouts/main-layout.astro";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import { WaitingList, db, sql } from "astro:db";
import { createForm } from "simple:form";
import z from "zod";
let error: boolean = false;

const newsletterForm = createForm({
  email: z.string().email(),
});

const res = await Astro.locals.form.getData(newsletterForm);

if (res?.data) {
  const response = await fetch(Astro.url.origin + "/api/waitlist", {
    method: "POST",
    headers: {
      Accept: "application.json",
      "Content-Type": "application/json",
    },
    body: JSON.stringify(res.data),
  });
  const data = await response.json();

  if (data.message === "success") {
    Astro.cookies.set("sub-newsletter", "true");
  } else {
    error = true;
  }
}

const cookie = Astro.cookies.get("sub-newsletter")?.boolean();
if (cookie) {
  Astro.cookies.delete("sub-newsletter");
}

// Fetch count of all email in waitlist
const waiting = await db
  .select({ count: sql<number>`count(*)`.mapWith(Number) })
  .from(WaitingList);
const count = waiting[0].count;

// With Fetch API:
// const response = await fetch(Astro.url.origin + "/api/waitlist");
// const { count } = await response.json();
---

<MainLayout
  title="Newsletter"
  description="A waiting list page with form using Astro DB."
  mainClass="bg-background-200"
>
  <div class="relative flex w-full min-h-svh items-center justify-center">
    <div
      class="px-4 py-5 sm:p-6 bg-background border rounded-xl overflow-hidden -mt-36"
    >
      <div class="flex flex-col gap-y-5 w-full max-w-sm">
        <div class="space-y-3">
          <Icon name="lucide:mail" class="size-10" />
          <h1 class="text-2xl font-heading tracking-wide">
            Subscribe to the newsletter
          </h1>
          <p class="text-sm text-muted-foreground">
            <b>{count} people</b> already joined the newsletter!
            <br />
            Fill out the form below to obtain a monthly summary of information around
            UX/UI!
            <br />
            Check <a href="/waitlist" class="underline">here</a> for use React Hook
            Form and Sonner.
          </p>
        </div>

        <form
          method="POST"
          class="flex flex-col items-start w-full gap-y-2"
          transition:name="form-newsletter"
          transition:animate="none"
        >
          <label
            for="email"
            class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Email
          </label>
          <Input
            id="email"
            autoComplete="off"
            placeholder="janedoe@example.com"
            {...newsletterForm.inputProps.email}
          />
          <p class="text-muted-foreground text-[13px]">
            <i>Unique email please. Errors with duplicates!</i>
          </p>
          <!-- {res?.fieldErrors?.email?.map((error) => <p class="text-[#ff6166] text-[13px]">{error}</p>)} -->

          {
            cookie || res?.fieldErrors?.email || error ? (
              <div
                class={cn(
                  "flex items-center gap-x-2.5 border text-sm w-full p-3 rounded-lg overflow-hidden",
                  error || res?.fieldErrors?.email
                    ? "border-[#fdd8d8] dark:border-[#671e21] text-[#ff6166] bg-[#ff6166]/10"
                    : null,
                  cookie
                    ? "border-[#cce6ff] dark:border-[#0d3868] text-[#52A8FF] bg-[#52A8FF]/10"
                    : null
                )}
              >
                <Icon name="lucide:info" class="size-5" />
                <p>
                  {cookie ? "You are subscribed!" : null}
                  {error ? "Something wrong! Try again please." : null}
                  {res?.fieldErrors?.email ? res?.fieldErrors?.email : null}
                </p>
              </div>
            ) : null
          }

          <Button type="submit" className="mt-4 w-full">Submit</Button>
        </form>
      </div>
    </div>
  </div>
</MainLayout>
